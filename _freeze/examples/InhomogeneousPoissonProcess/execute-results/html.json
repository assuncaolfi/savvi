{
  "hash": "1194fc5fbb649c9191bf37010b98cfa1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Inhomogeneous Poisson Process\nsubtitle: '[Reference](../reference/InhomogeneousPoissonProcess.qmd)'\n---\n\n_Application: software canary testing when all processes share a common multiplicative time-varying effect._\n\nConsider points are observed from one of $i \\in \\{1, 2\\}$ Poisson point processes with intensity functions $\\lambda_i(t) = \\rho_i \\exp(\\delta_i) \\lambda(t)$, with $\\rho = [0.8, 0.2]$ and $\\delta = [1.5, 2]$. The probability that the next point comes from process $i$ is\n\n$$\n\\theta_i = \\frac{\\rho_i \\exp(\\delta_i)}{\\sum_{j=1}^d \\rho_j \\exp(\\delta_j)}.\n$$\n\nTherefore, the next point comes from a random process, distributed as $\\mathrm{Multinomial}(1, \\mathbf{\\theta})$, with $\\mathbf{\\theta} \\approx [0.7, 0.3]$.\n\n::: {#data .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nrho = np.array([0.8, 0.2])\ndelta = np.array([1.5, 2])\ntheta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))\nsize = 1000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 0]\n [0 1]\n [1 0]\n ...\n [1 0]\n [1 0]\n [0 1]]\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\delta_1 - \\delta_0 = 0 \\quad (\\mathbf{\\theta} = \\mathbf{\\rho}) \\\\\nH_1: \\delta_1 - \\delta_0 \\neq 0  \\quad (\\mathbf{\\theta} \\neq \\mathbf{\\rho})\n\\end{align}\n$$\n\nusing a Multinomial test with $\\mathbf{\\theta}_0 = \\mathbf{\\rho}$. To estimate a $(1 - \\alpha)$ confidence sequence for $\\delta_1 - \\delta_0$, we may set weights $[-1, 1]$:\n\n::: {#hypothesis .cell message='false' execution_count=2}\n``` {.python .cell-code}\nfrom savvi.multinomial import InhomogeneousPoissonProcess\n\nalpha = 0.05\nweights = np.array([[-1, 1]])\nipp = InhomogeneousPoissonProcess(alpha, rho, weights)\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver ECOS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver SCS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver ECOS_BB:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver OSQP:\nImportError('numpy.core.multiarray failed to import')\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=3}\n``` {.python .cell-code}\nsequence = ipp.batch(xs)\noptional_stop = next(s for s in sequence if s.p_value <= alpha)\noptional_stop\n```\n\n::: {#sequence .cell-output .cell-output-display .cell-output-markdown execution_count=3}\n|        Parameter       |Estimate|CI Lower|CI Upper|\n|------------------------|--------|--------|--------|\n|$- \\delta_0 +  \\delta_1$| 0.5162 | 0.0046 | 0.7549 |\nSample size: 210, P-value: 0.0456\n:::\n:::\n\n\n::: {#cell-viz .cell execution_count=4}\n``` {.python .cell-code}\n%config InlineBackend.figure_formats = [\"svg\"]\n\nimport matplotlib.pyplot as plt\nfrom savvi.utils import plot\n\ncontrasts = ipp.weights @ delta\n_, ax1, _ = plot(sequence, contrasts)\nax1.set_ylim(-1, 2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](InhomogeneousPoissonProcess_files/figure-html/viz-output-1.svg){#viz}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "InhomogeneousPoissonProcess_files"
    ],
    "filters": [],
    "includes": {}
  }
}