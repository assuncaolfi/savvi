{
  "hash": "4dc7bacaeae69fd5bbc7bd52536b29ad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Inhomogeneous Poisson Process\n---\n\n_Application: software canary testing when all processes share a common multiplicative time-varying effect._\n\nBased on @lindon2022anytimevalid.\n\nConsider points are observed from one of $i \\in \\{1, 2\\}$ Poisson point processes with intensity functions $\\lambda_i(t) = \\rho_i \\exp(\\delta_i) \\lambda(t)$, with $\\rho = [0.8, 0.2]$ and $\\delta = [1.5, 2]$. The probability that the next point comes from process $i$ is\n\n$$\n\\theta_i = \\frac{\\rho_i \\exp(\\delta_i)}{\\sum_{j=1}^d \\rho_j \\exp(\\delta_j)}.\n$$\n\nTherefore, the next point comes from a random process, distributed as $\\mathrm{Multinomial}(1, \\mathbf{\\theta})$, with $\\mathbf{\\theta} \\approx [0.7, 0.3]$.\n\n::: {#data .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\nrho = np.array([0.8, 0.2])\ndelta = np.array([1.5, 2])\ntheta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))\nsize = 1500\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 0]\n [0 1]\n [1 0]\n ...\n [1 0]\n [1 0]\n [0 1]]\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\delta_1 - \\delta_0 = 0 \\quad (\\mathbf{\\theta} = \\mathbf{\\rho}) \\\\\nH_1: \\delta_1 - \\delta_0 \\neq 0  \\quad (\\mathbf{\\theta} \\neq \\mathbf{\\rho})\n\\end{align}\n$$\n\nusing a Multinomial test with $\\alpha = 0.05$, $\\mathbf{\\theta}_0 = \\mathbf{\\rho}$ and contrast weights $[-1, 1]$ to estimate a confidence sequence for $\\delta_1 - \\delta_0$:\n\n::: {#hypothesis .cell execution_count=3}\n``` {.python .cell-code}\nfrom savvi.multinomial import InhomogeneousPoissonProcess\n\nalpha = 0.05\nweights = np.array([[-1, 1]])\nipp = InhomogeneousPoissonProcess(alpha, rho, weights)\n```\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=4}\n``` {.python .cell-code}\nimport cvxpy as cp\n\nsolver = cp.CLARABEL\nsequence = ipp.batch(xs, solver=solver)\noptional_stop = next(s for s in sequence if s.p_value <= alpha)\nvars(optional_stop)\n```\n\n::: {#sequence .cell-output .cell-output-display execution_count=3}\n```\n{'n': 210,\n 'alpha': 0.05,\n 'conf_int': array([[0.00464625, 0.75493987]]),\n 'p_value': array([0.04557963]),\n 'theta_0': array([0.8, 0.2]),\n 'alpha_0': array([80., 20.]),\n 'counts': array([148,  62]),\n 'odds': 21.93962437612422,\n 'hypothesis': <function savvi.multinomial.InhomogeneousPoissonProcess.__init__.<locals>.<lambda>(_)>,\n 'weights': array([[-1,  1]])}\n```\n:::\n:::\n\n\n::: {#cell-plot .cell execution_count=5}\n``` {.python .cell-code}\n%config InlineBackend.figure_formats = [\"svg\"]\n\nimport matplotlib.pyplot as plt\nfrom savvi.utils import plot\n\ncontrasts = ipp.weights @ delta\n_, ax1, _ = plot(sequence, contrasts)\nax1.set_ylim(-1, 2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](InhomogeneousPoissonProcess_files/figure-html/plot-output-1.svg){#plot}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "InhomogeneousPoissonProcess_files"
    ],
    "filters": [],
    "includes": {}
  }
}