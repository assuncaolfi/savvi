{
  "hash": "bfaeb8bff523a05d06456ac2a20ba28f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Multinomial\n---\n\n_Application: sample ratio mismatch._ \n\nBased on @lindon2022anytimevalid.\n\nConsider a new experimental unit $n$ is assigned to one of $i \\in \\{1, 2, 3\\}$ groups with probabilities $\\mathbf{\\theta} = [0.1, 0.3, 0.6]$. Therefore, groups are $\\mathrm{Multinomial}(1, \\mathbf{\\theta})$ distributed.\n\n::: {#data .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\ntheta = np.array([0.1, 0.3, 0.6])\nsize = 1000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0 1 0]\n [0 0 1]\n [0 0 1]\n ...\n [0 1 0]\n [1 0 0]\n [0 0 1]]\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\mathbf{\\theta} = \\mathbf{\\theta_0} \\\\\nH_1: \\mathbf{\\theta} \\neq \\mathbf{\\theta_0}\n\\end{align}\n$$\n\nwith $\\mathbf{\\theta_0} = [0.1, 0.4, 0.5]$, as well as estimate confidence sequences for $\\theta$ at a significance level $\\alpha$, using the default Multinomial test:\n\n::: {#hypothesis .cell execution_count=3}\n``` {.python .cell-code}\nfrom savvi.multinomial import Multinomial\n\nalpha = 0.05\ntheta_0 = np.array([0.1, 0.4, 0.5])\nmultinomial = Multinomial(0.05, theta_0)\n```\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=4}\n``` {.python .cell-code}\nimport cvxpy as cp\nsequence = multinomial.batch(xs, solver=cp.CLARABEL)\noptional_stop = next(s for s in sequence if s.p_value <= alpha)\nvars(optional_stop)\n```\n\n::: {#sequence .cell-output .cell-output-display execution_count=3}\n```\n{'n': 402,\n 'alpha': 0.05,\n 'conf_int': array([[0.05668477, 0.14939676],\n        [0.26089872, 0.40283026],\n        [0.49712093, 0.65176173]]),\n 'p_value': array([0.04845591]),\n 'theta_0': array([0.1, 0.4, 0.5]),\n 'alpha_0': array([10., 40., 50.]),\n 'counts': array([ 40, 129, 233]),\n 'odds': 20.637317060617267}\n```\n:::\n:::\n\n\n::: {#cell-fig .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\n%config InlineBackend.figure_formats = [\"svg\"]\n\nfrom savvi.utils import plot\n\nplot(sequence, theta);\n```\n\n::: {.cell-output .cell-output-display}\n![](Multinomial_files/figure-html/fig-output-1.svg){#fig}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "Multinomial_files"
    ],
    "filters": [],
    "includes": {}
  }
}