{
  "hash": "ef1def7c516e0ec1efea3e99a60f1db3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Linear Regression\nsubtitle: '[Reference](../reference/LinearRegression.qmd)'\n---\n\n_Application: testing of treatment effects while adjusting for pre-treatment covariables._ \n\nConsider the arrival of a new experimental unit $n$. This unit has a pre-treatment measurement $x_n \\in \\mathbb{R}$ and is assigned a treatment $z_n \\in \\{0, 1\\}$. After the treatment, the unit produces an outcome\n\n$$\n\\begin{aligned}\ny_n = \\beta_0 + \\beta_1 x_n + \\beta_2 z_n + \\epsilon_n \\\\\n\\epsilon_n \\sim N(0, 1).\n\\end{aligned}\n$$\n\n::: {#data .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\nsize = 5000\nnp.random.seed(1)\nx = np.random.normal(size=size)\nz = np.random.binomial(1, 1 / 2, size=size)\nepsilon = np.random.normal(size=size)\nbeta = np.array([1.00, 0.32, 0.16])\ny = beta[0] + beta[1] * x + beta[2] * z + epsilon\nyx = np.column_stack((y, np.ones(size), x, z))\n\nprint(yx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 1.20608328  1.          1.62434536  1.        ]\n [ 0.61208307  1.         -0.61175641  0.        ]\n [ 1.7668771   1.         -0.52817175  0.        ]\n ...\n [ 2.33983342  1.         -0.77598779  0.        ]\n [-0.85242757  1.          1.08488869  0.        ]\n [ 3.49552322  1.          2.24198946  1.        ]]\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\beta_2 = 0 \\\\\nH_1: \\beta_2 \\neq 0\n\\end{align}\n$$\n\nand estimate $(1 - \\alpha)$ confidence sequences for $\\beta_2$ using a `LinearRegression` model:\n\n::: {#hypothesis .cell execution_count=3}\n``` {.python .cell-code}\nfrom savvi.linear_regression import LinearRegression\n\nalpha = 0.05\np = beta.size\nlr = LinearRegression(alpha, p)\n```\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n(\\beta_2) < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=4}\n``` {.python .cell-code}\nsequence = lr.batch(yx)\noptional_stop = next(s for s in sequence if s.p_value[2] <= alpha)\noptional_stop\n```\n\n::: {#sequence .cell-output .cell-output-display .cell-output-markdown execution_count=8}\n|Parameter|Estimate|CI Lower|CI Upper|P-value|\n|---------|--------|--------|--------|-------|\n|$\\beta_0$| 1.0056 | 0.9187 | 1.1539 |  0.0  |\n|$\\beta_1$| 0.3357 | 0.2234 | 0.3987 |  0.0  |\n|$\\beta_2$| 0.2128 | 0.0027 | 0.3701 | 0.0432|\nSample size: 949\n:::\n:::\n\n\n::: {#cell-viz .cell execution_count=5}\n``` {.python .cell-code}\n%config InlineBackend.figure_formats = [\"svg\"]\nfrom savvi.utils import plot\n\nfig, ax1, ax2 = plot(sequence, truth=beta, index=[2])\nax1.set_ylim(-0.25, 0.75)\n```\n\n::: {.cell-output .cell-output-display}\n![](LinearRegression_files/figure-html/viz-output-1.png){#viz width=649 height=429}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "LinearRegression_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}