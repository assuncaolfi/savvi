{
  "hash": "801558750d514e06c4e3a3f2a422aa1a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Inhomogeneous Bernoulli Process\nsubtitle: '[Reference](../reference/InhomogeneousBernoulliProcess.qmd)'\n---\n\n_Application: conversion rate optimization when all groups share a common multiplicative time-varying effect._\n\nSuppose a new experimental unit $n$ is randomly assigned to one of $i \\in \\{1, 2, 3\\}$ experiment treatment groups at time $t$, with assignment probabilities $\\mathbf{\\rho} = [0.1, 0.3, 0.6]$, and a Bernoulli outcome is observed with probability $p_i(t) = \\exp(\\mu(t) + \\delta_{i})$, $\\mathbf{\\delta} = [\\log 0.2, \\log 0.3, \\log 0.4]$. The conditional probability that the next Bernoulli success comes from group $i$ is\n\n$$\n\\theta_i = \\frac{\\rho_i \\exp(\\delta_i)}{\\sum_{j=1}^d \\rho_j \\exp(\\delta_j)}.\n$$\n\nTherefore, the next Bernoulli success comes from a random group, $\\mathrm{Multinomial}(1, \\mathbf{\\theta})$ distributed, with $\\mathbf{\\theta} \\approx [0.05, 0.25, 0.68]$.\n\n::: {#data .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nrho = np.array([0.1, 0.3, 0.6])\ndelta = np.log([0.2, 0.3, 0.4])\ntheta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))\nsize = 4000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0 0 1]\n [0 0 1]\n [0 0 1]\n ...\n [0 1 0]\n [0 1 0]\n [0 0 1]]\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\delta_0 \\geq \\delta_1, \\delta_0 \\geq \\delta_2 \\\\\nH_1: \\delta_0 \\lt \\delta_1, \\delta_0 \\lt \\delta_2\n\\end{align}\n$$\n\nusing a Multinomial test with $\\mathbf{\\theta}_0 = \\mathbf{\\rho}$ and a list of inequalities for $\\mathbf{\\delta}$. To estimate $(1 - \\alpha)$ confidence intervals for the contrasts, we may set a matrix of weights, with rows $[-1, 0, 1]$ for $\\delta_2 - \\delta_0$ and $[0, -1, 1]$ for $\\delta_2 - \\delta_1$:\n\n::: {#hypothesis .cell message='false' execution_count=2}\n``` {.python .cell-code}\nfrom savvi.multinomial import InhomogeneousBernoulliProcess\n\nalpha = 0.05\nhypothesis = lambda delta: [delta[0] >= delta[1], delta[0] >= delta[2]]\nweights = np.array([[-1, 0, 1], [0, -1, 1]])\nibp = InhomogeneousBernoulliProcess(alpha, rho, hypothesis, weights)\n```\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver ECOS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver SCS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver ECOS_BB:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver OSQP:\nImportError('numpy.core.multiarray failed to import')\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nAttributeError: _ARRAY_API not found\n```\n:::\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=3}\n``` {.python .cell-code}\nsequence = ibp.batch(xs)\noptional_stop = next(s for s in sequence if s.p_value <= alpha)\noptional_stop\n```\n\n::: {#sequence .cell-output .cell-output-display .cell-output-markdown execution_count=3}\n|        Parameter       |Estimate|CI Lower|CI Upper|\n|------------------------|--------|--------|--------|\n|$- \\delta_0 +  \\delta_2$| 0.8232 | 0.0009 | 1.7716 |\n|$- \\delta_1 +  \\delta_2$| 0.2231 | -0.1577| 0.6472 |\nSample size: 302, P-value: 0.0492\n:::\n:::\n\n\n::: {#cell-viz .cell execution_count=4}\n``` {.python .cell-code}\n%config InlineBackend.figure_formats = [\"svg\"]\nimport matplotlib.pyplot as plt\nfrom savvi.utils import plot\n\ncontrasts = ibp.weights @ delta\n_, ax1, _ = plot(sequence, contrasts)\nax1.set_ylim(-1, 2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](InhomogeneousBernoulliProcess_files/figure-html/viz-output-1.svg){#viz}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "InhomogeneousBernoulliProcess_files"
    ],
    "filters": [],
    "includes": {}
  }
}