{
  "hash": "bc91f230eb363b27baa4d162aca3ff45",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Linear Regression\n---\n\n_Application: testing of treatment effects while adjusting for pre-treatment covariables._ \n\nBased on @lindon2024anytimevalidlinearmodelsregression.\n\nConsider a new experimental unit $n$. This unit has a pre-treatment measurement $x_n \\in \\mathbb{R}$ and is assigned a treatment $z_n \\in \\{0, 1\\}$. After the treatment, the unit produces an outcome:\n\n$$\n\\begin{aligned}\ny_n = \\beta_0 + \\beta_1 x_n + \\beta_2 z_n + \\epsilon_n \\\\\n\\epsilon \\sim N(0, 1).\n\\end{aligned}\n$$\n\n::: {#data .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\nsize = 5000\nnp.random.seed(1)\nx = np.random.normal(size=size)\nz = np.random.binomial(1, 1 / 2, size=size)\nepsilon = np.random.normal(size=size)\nbeta = [1.00, 0.32, 0.16]\ny = beta[0] + beta[1] * x + beta[2] * z + epsilon\nxs = np.column_stack((np.ones(size), x, z))\nxys = list(zip(xs, y))\n\nprint(xys[0])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(array([1.        , 1.62434536, 1.        ]), 1.206083277199519)\n```\n:::\n:::\n\n\nWe can test the hypothesis\n\n$$\n\\begin{align}\nH_0: \\mathbf{\\beta_2} = 0 \\\\\nH_1: \\mathbf{\\beta_2} \\neq 0\n\\end{align}\n$$\n\nas well as estimate confidence sequences for $\\beta_2$ at a significance level $\\alpha$ using a `LinearRegression` model:\n\n::: {#hypothesis .cell execution_count=3}\n``` {.python .cell-code}\nfrom savvi.linear_regression import LinearRegression\n\nalpha = 0.05\np = xs.shape[1]\nlr = LinearRegression(alpha, p)\n```\n:::\n\n\nFor each new unit sample $n$, we run the test. If $p_n(\\beta_2) < \\alpha$, we have the option to stop running:\n\n::: {#cell-sequence .cell execution_count=4}\n``` {.python .cell-code}\nsequence = lr.batch(xys)\noptional_stop = next(s for s in sequence if s.p_value[2] <= alpha)\nvars(optional_stop)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/assuncaolfi/Projects/savvi/src/savvi/linear_regression.py:190: RuntimeWarning: divide by zero encountered in divide\n  (1 - (r * self.alpha**2) ** (1 / (nu + 1)))\n```\n:::\n\n::: {#sequence .cell-output .cell-output-display execution_count=3}\n```\n{'lamb': 1,\n 'phi': 1,\n 'beta': array([1.0055657 , 0.33571434, 0.21281887]),\n 'covariance': array([[ 2.00002114e-03,  4.79141349e-06, -2.00052672e-03],\n        [ 4.79141349e-06,  1.08540923e-03, -1.19321030e-04],\n        [-2.00052672e-03, -1.19321030e-04,  4.24028865e-03]]),\n 'yty': 2165.7191404198866,\n 'Xty': array([1065.0017909 ,  366.4833688 ,  562.95992555]),\n 'n': 949,\n 'alpha': 0.05,\n 'conf_int': array([[0.91873431, 1.15391855],\n        [0.22339472, 0.39869202],\n        [0.00266113, 0.37009552]]),\n 'p_value': array([2.12264657e-95, 7.26608201e-23, 4.32465372e-02])}\n```\n:::\n:::\n\n\n::: {#cell-fig .cell execution_count=5}\n``` {.python .cell-code}\n%config InlineBackend.figure_formats = [\"svg\"]\nfrom savvi.utils import plot\n\nfig, ax1, ax2 = plot(sequence, truth=beta, index=[2])\nax1.set_ylim(-0.25, 0.75)\n```\n\n::: {.cell-output .cell-output-display}\n![](LinearRegression_files/figure-html/fig-output-1.svg){#fig}\n:::\n:::\n\n\n\n\n",
    "supporting": [
      "LinearRegression_files"
    ],
    "filters": [],
    "includes": {}
  }
}