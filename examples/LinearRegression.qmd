---
title: Linear Regression
subtitle: '[Reference](../reference/LinearRegression.qmd)'
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.2
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

_Application: testing of treatment effects while adjusting for pre-treatment covariables._ 

Consider a new experimental unit $n$. This unit has a pre-treatment measurement $x_n \in \mathbb{R}$ and is assigned a treatment $z_n \in \{0, 1\}$. After the treatment, the unit produces an outcome:

$$
\begin{aligned}
y_n = \beta_0 + \beta_1 x_n + \beta_2 z_n + \epsilon_n \\
\epsilon \sim N(0, 1).
\end{aligned}
$$

```{python}
#| label: data
import numpy as np

size = 5000
np.random.seed(1)
x = np.random.normal(size=size)
z = np.random.binomial(1, 1 / 2, size=size)
epsilon = np.random.normal(size=size)
beta = [1.00, 0.32, 0.16]
y = beta[0] + beta[1] * x + beta[2] * z + epsilon
xs = np.column_stack((np.ones(size), x, z))
xys = list(zip(xs, y))

print(xys[0])
```

We can test the hypothesis

$$
\begin{align}
H_0: \mathbf{\beta_2} = 0 \\
H_1: \mathbf{\beta_2} \neq 0
\end{align}
$$

as well as estimate confidence sequences for $\beta_2$ at a significance level $\alpha$ using a `LinearRegression` model:

```{python}
#| label: hypothesis
from savvi.linear_regression import LinearRegression

alpha = 0.05
p = xs.shape[1]
lr = LinearRegression(alpha, p)
```

For each new unit sample $n$, we run the test. If $p_n < \alpha$, we have the option to stop running:

```{python}
#| label: sequence
sequence = lr.batch(xys)
optional_stop = next(s for s in sequence if s.p_value[2] <= alpha)
vars(optional_stop)
```

```{python}
#| label: viz
%config InlineBackend.figure_formats = ["svg"]
from savvi.utils import plot

fig, ax1, ax2 = plot(sequence, truth=beta, index=[2])
ax1.set_ylim(-0.25, 0.75)
```

```{python}
#| label: test
#| echo: false
np.testing.assert_almost_equal(optional_stop.n, 949)
np.testing.assert_almost_equal(
    optional_stop.p_value, [2.12264657e-95, 7.26608201e-23, 4.32465372e-02]
)
np.testing.assert_almost_equal(
    optional_stop.conf_int,
    [[0.91873431, 1.15391855], [0.22339472, 0.39869202], [0.00266113, 0.37009552]],
)
```
