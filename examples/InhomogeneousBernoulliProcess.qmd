---
title: Inhomogeneous Bernoulli Process
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.2
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

_Application: conversion rate optimization when all groups share a common multiplicative time-varying effect._

Based on @lindon2022anytimevalid.

Suppose a new experimental unit $n$ is randomly assigned to one of $i \in \{1, 2, 3\}$ experiment treatment groups at time $t$, with assignment probabilities $\mathbf{\rho} = [0.1, 0.3, 0.6]$, and a Bernoulli outcome is observed with probability $p_i(t) = \exp(\mu(t) + \delta_{i})$, $\mathbf{\delta} = [\log 0.2, \log 0.3, \log 0.4]$. The conditional probability that the next Bernoulli success comes from group $i$ is

$$
\theta_i = \frac{\rho_i \exp(\delta_i)}{\sum_{j=1}^d \rho_j \exp(\delta_j)}.
$$

Therefore, the next Bernoulli success comes from a random group, $\mathrm{Multinomial}(1, \mathbf{\theta})$ distributed, with $\mathbf{\theta} \approx [0.05, 0.25, 0.68]$.

```{python}
#| label: data
#| warning: false
import numpy as np

rho = np.array([0.1, 0.3, 0.6])
delta = np.log([0.2, 0.3, 0.4])
theta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))
size = 5250
np.random.seed(1)
xs = np.random.multinomial(1, theta, size=size)
print(xs)
```

We can test the hypothesis

$$
\begin{align}
H_0: \delta_0 \geq \delta_1, \delta_0 \geq \delta_2 \\
H_1: \delta_0 \lt \delta_1, \delta_0 \lt \delta_2
\end{align}
$$

using a Multinomial test with $\mathbf{\theta}_0 = \mathbf{\rho}$ and a list of inequalities for $\mathbf{\delta}$. To estimate confidence intervals for the contrasts, we may set a matrix of weights, with rows $[-1, 0, 1]$ for $\delta_2 - \delta_0$ and $[0, -1, 1]$ for $\delta_2 - \delta_1$:

```{python}
#| label: hypothesis
from savvi.multinomial import InhomogeneousBernoulliProcess

alpha = 0.05
hypothesis = lambda delta: [delta[0] >= delta[1], delta[0] >= delta[2]]
weights = np.array([[-1, 0, 1], [0, -1, 1]])
ibp = InhomogeneousBernoulliProcess(alpha, rho, hypothesis, weights)
```

For each new unit sample $n$, we run the test. If $p_n < u$, we have the option to stop running:

```{python}
#| label: sequence
#| warning: false
import cvxpy as cp

solver = cp.CLARABEL
sequence = ibp.batch(xs, solver=solver)
optional_stop = next(s for s in sequence if s.p_value <= alpha)
vars(optional_stop)
```

```{python}
#| label: fig
%config InlineBackend.figure_formats = ["svg"]

import matplotlib.pyplot as plt
from savvi.utils import plot

contrasts = ibp.weights @ delta
_, ax1, _ = plot(sequence, contrasts)
ax1.set_ylim(-1, 2)
plt.show()
```

```{python}
#| label: test
#| echo: false
np.testing.assert_almost_equal(optional_stop.n, 302)
np.testing.assert_almost_equal(optional_stop.p_value, 0.04923546556969403)
np.testing.assert_almost_equal(
    optional_stop.conf_int,
    [
        [9.38644932e-04, 1.77164771e+00],
        [-1.57653154e-01, 6.47239250e-01],
    ],
)
```
