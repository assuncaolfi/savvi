# Multinomial { #savvi.multinomial.Multinomial }

```python
multinomial.Multinomial(self, alpha, theta_0, k=100)
```

Sample ratio mismatch test from @lindon2022anytimevalid.

* Parent class: [`Inference`](/reference/Inference.qmd)
* [Example](../examples/Multinomial.qmd)

## Parameters {.doc-section .doc-section-parameters}

| Name    | Type       | Description                                                                             | Default    |
|---------|------------|-----------------------------------------------------------------------------------------|------------|
| alpha   | float      | Probability of Type I error $\alpha$.                                                   | _required_ |
| theta_0 | np.ndarray | Null Multinomial parameters $\mathbf{\theta}_0$.                                        | _required_ |
| k       | float      | Concentration for Dirichlet prior parameters $\mathbf{\alpha}_0 = k \mathbf{\theta}_0$. | `100`      |

## Attributes

| Name | Description |
| --- | --- |
| [alpha_0](#savvi.multinomial.Multinomial.alpha_0) | Prior Dirichlet parameters $\mathbf{\alpha}_0$. |
| [counts](#savvi.multinomial.Multinomial.counts) | Success counts. |
| [odds](#savvi.multinomial.Multinomial.odds) | Posterior odds. |
| [theta](#savvi.multinomial.Multinomial.theta) | Estimate of theta $\mathbf{\hat{\theta}}$. |
| [theta_0](#savvi.multinomial.Multinomial.theta_0) | Null Multinomial parameters $\mathbf{\theta}_0$. |

## Methods

| Name | Description |
| --- | --- |
| [update](#savvi.multinomial.Multinomial.update) | Update the model with success counts. |

### update { #savvi.multinomial.Multinomial.update }

```python
multinomial.Multinomial.update(x)
```

Update the model with success counts.

#### Parameters {.doc-section .doc-section-parameters}

| Name   | Type       | Description     | Default    |
|--------|------------|-----------------|------------|
| x      | np.ndarray | Success counts. | _required_ |