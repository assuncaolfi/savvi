# InhomogeneousBernoulliProcess { #savvi.multinomial.InhomogeneousBernoulliProcess }

```python
multinomial.InhomogeneousBernoulliProcess(
    self
    alpha
    rho
    hypothesis
    weights
    k=100
)
```

Conversion rate optimization test from @lindon2022anytimevalid.

* Parent class: [`Multinomial`](/reference/Multinomial.qmd)
* [Example](../examples/InhomogeneousBernoulliProcess.qmd)

## Parameters {.doc-section .doc-section-parameters}

| Name       | Type                                               | Description                                                                         | Default    |
|------------|----------------------------------------------------|-------------------------------------------------------------------------------------|------------|
| alpha      | float                                              | Probability of Type I error $\alpha$.                                               | _required_ |
| rho        | np.ndarray                                         | Assignment probabilities $\mathbf{\rho}$.                                           | _required_ |
| hypothesis | Callable\[\[cp.Variable\], List\[cp.Constraint\]\] | Function to generate hypothesis constraints.                                        | _required_ |
| weights    | np.ndarray                                         | Contrast weights $W$.                                                               | _required_ |
| k          | float                                              | Concentration for Dirichlet prior parameters $\mathbf{\alpha}_0 = k \mathbf{\rho}$. | `100`      |

## Attributes

| Name | Description |
| --- | --- |
| [contrasts](#savvi.multinomial.InhomogeneousBernoulliProcess.contrasts) | Estimate of contrasts $\hat{W \mathbf{\delta}}$. |
| [hypothesis](#savvi.multinomial.InhomogeneousBernoulliProcess.hypothesis) | Function to generate hypothesis constraints. |
| [weights](#savvi.multinomial.InhomogeneousBernoulliProcess.weights) | Contrast weights $W$. |