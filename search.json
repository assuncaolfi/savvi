[
  {
    "objectID": "reference/Multinomial.html",
    "href": "reference/Multinomial.html",
    "title": "Multinomial",
    "section": "",
    "text": "multinomial.Multinomial(self, alpha, theta_0, k=100)\nSample ratio mismatch test from Lindon and Malek (2022).\n\nParent class: Inference\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\ntheta_0\nnp.ndarray\nNull Multinomial parameters \\(\\mathbf{\\theta}_0\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\theta}_0\\).\n100\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nalpha_0\nPrior Dirichlet parameters \\(\\mathbf{\\alpha}_0\\).\n\n\ncounts\nSuccess counts.\n\n\nodds\nPosterior odds.\n\n\ntheta\nEstimate of theta \\(\\mathbf{\\hat{\\theta}}\\).\n\n\ntheta_0\nNull Multinomial parameters \\(\\mathbf{\\theta}_0\\).\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nupdate\nUpdate the model with success counts.\n\n\n\n\n\nmultinomial.Multinomial.update(x)\nUpdate the model with success counts.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.ndarray\nSuccess counts.\nrequired",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "Multinomial"
    ]
  },
  {
    "objectID": "reference/Multinomial.html#parameters",
    "href": "reference/Multinomial.html#parameters",
    "title": "Multinomial",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\ntheta_0\nnp.ndarray\nNull Multinomial parameters \\(\\mathbf{\\theta}_0\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\theta}_0\\).\n100",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "Multinomial"
    ]
  },
  {
    "objectID": "reference/Multinomial.html#attributes",
    "href": "reference/Multinomial.html#attributes",
    "title": "Multinomial",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nalpha_0\nPrior Dirichlet parameters \\(\\mathbf{\\alpha}_0\\).\n\n\ncounts\nSuccess counts.\n\n\nodds\nPosterior odds.\n\n\ntheta\nEstimate of theta \\(\\mathbf{\\hat{\\theta}}\\).\n\n\ntheta_0\nNull Multinomial parameters \\(\\mathbf{\\theta}_0\\).",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "Multinomial"
    ]
  },
  {
    "objectID": "reference/Multinomial.html#methods",
    "href": "reference/Multinomial.html#methods",
    "title": "Multinomial",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nupdate\nUpdate the model with success counts.\n\n\n\n\n\nmultinomial.Multinomial.update(x)\nUpdate the model with success counts.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnp.ndarray\nSuccess counts.\nrequired",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "Multinomial"
    ]
  },
  {
    "objectID": "reference/InhomogeneousBernoulliProcess.html",
    "href": "reference/InhomogeneousBernoulliProcess.html",
    "title": "InhomogeneousBernoulliProcess",
    "section": "",
    "text": "multinomial.InhomogeneousBernoulliProcess(\n    self\n    alpha\n    rho\n    hypothesis\n    weights\n    k=100\n)\nConversion rate optimization test from Lindon and Malek (2022).\n\nParent class: Multinomial\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\nrho\nnp.ndarray\nAssignment probabilities \\(\\mathbf{\\rho}\\).\nrequired\n\n\nhypothesis\nCallable[[cp.Variable], List[cp.Constraint]]\nFunction to generate hypothesis constraints.\nrequired\n\n\nweights\nnp.ndarray\nContrast weights \\(W\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\rho}\\).\n100\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ncontrasts\nEstimate of contrasts \\(\\hat{W \\mathbf{\\delta}}\\).\n\n\nhypothesis\nFunction to generate hypothesis constraints.\n\n\nweights\nContrast weights \\(W\\).",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "InhomogeneousBernoulliProcess"
    ]
  },
  {
    "objectID": "reference/InhomogeneousBernoulliProcess.html#parameters",
    "href": "reference/InhomogeneousBernoulliProcess.html#parameters",
    "title": "InhomogeneousBernoulliProcess",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\nrho\nnp.ndarray\nAssignment probabilities \\(\\mathbf{\\rho}\\).\nrequired\n\n\nhypothesis\nCallable[[cp.Variable], List[cp.Constraint]]\nFunction to generate hypothesis constraints.\nrequired\n\n\nweights\nnp.ndarray\nContrast weights \\(W\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\rho}\\).\n100",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "InhomogeneousBernoulliProcess"
    ]
  },
  {
    "objectID": "reference/InhomogeneousBernoulliProcess.html#attributes",
    "href": "reference/InhomogeneousBernoulliProcess.html#attributes",
    "title": "InhomogeneousBernoulliProcess",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ncontrasts\nEstimate of contrasts \\(\\hat{W \\mathbf{\\delta}}\\).\n\n\nhypothesis\nFunction to generate hypothesis constraints.\n\n\nweights\nContrast weights \\(W\\).",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "InhomogeneousBernoulliProcess"
    ]
  },
  {
    "objectID": "reference/Inference.html",
    "href": "reference/Inference.html",
    "title": "Inference",
    "section": "",
    "text": "Inference(self, alpha, p, tests=1)\nBase class for inference.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\np\nint\nNumber of parameters \\(p\\).\nrequired\n\n\ntests\nint\nNumber of hypothesis tests.\n1\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nalpha\nProbability of Type I error \\(\\alpha\\).\n\n\nconf_int\nConfidence intervals for each parameter (\\(p \\times 2\\) matrix).\n\n\nestimate\nEstimates for each parameter.\n\n\nn\nNumber of observations \\(n\\).\n\n\nnames\nNames for each parameter.\n\n\np\nNumber of parameters \\(p\\).\n\n\np_value\nP-values for each hypothesis test.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nbatch\nFor each sample unit in the batch\n\n\ninfer\nCalculate confidence interval and p-value, then\n\n\nupdate\nUpdate statistics with new data.\n\n\n\n\n\nInference.batch(xs, **kwargs)\nFor each sample unit in the batch\n\ncall update,\ncall infer, and\nappend the Inference object to a list.\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nList[Inference]\n\n\n\n\n\n\n\n\nInference.infer(**kwargs)\nCalculate confidence interval and p-value, then\n\nkeep the maximum lower bound and minimum upper bound for the confidence interval; and\nkeep the minimum p-value.\n\n\n\n\nInference.update(x, **kwargs)\nUpdate statistics with new data.",
    "crumbs": [
      "Reference",
      "savvi",
      "Inference"
    ]
  },
  {
    "objectID": "reference/Inference.html#parameters",
    "href": "reference/Inference.html#parameters",
    "title": "Inference",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\np\nint\nNumber of parameters \\(p\\).\nrequired\n\n\ntests\nint\nNumber of hypothesis tests.\n1",
    "crumbs": [
      "Reference",
      "savvi",
      "Inference"
    ]
  },
  {
    "objectID": "reference/Inference.html#attributes",
    "href": "reference/Inference.html#attributes",
    "title": "Inference",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nalpha\nProbability of Type I error \\(\\alpha\\).\n\n\nconf_int\nConfidence intervals for each parameter (\\(p \\times 2\\) matrix).\n\n\nestimate\nEstimates for each parameter.\n\n\nn\nNumber of observations \\(n\\).\n\n\nnames\nNames for each parameter.\n\n\np\nNumber of parameters \\(p\\).\n\n\np_value\nP-values for each hypothesis test.",
    "crumbs": [
      "Reference",
      "savvi",
      "Inference"
    ]
  },
  {
    "objectID": "reference/Inference.html#methods",
    "href": "reference/Inference.html#methods",
    "title": "Inference",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nbatch\nFor each sample unit in the batch\n\n\ninfer\nCalculate confidence interval and p-value, then\n\n\nupdate\nUpdate statistics with new data.\n\n\n\n\n\nInference.batch(xs, **kwargs)\nFor each sample unit in the batch\n\ncall update,\ncall infer, and\nappend the Inference object to a list.\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nList[Inference]\n\n\n\n\n\n\n\n\nInference.infer(**kwargs)\nCalculate confidence interval and p-value, then\n\nkeep the maximum lower bound and minimum upper bound for the confidence interval; and\nkeep the minimum p-value.\n\n\n\n\nInference.update(x, **kwargs)\nUpdate statistics with new data.",
    "crumbs": [
      "Reference",
      "savvi",
      "Inference"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "savvi",
    "section": "",
    "text": "savvi is a package for Safe Anytime Valid Inference. Also, itâ€™s a savvy pun.\nFrom Ramdas et al. (2023):"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "savvi",
    "section": "Install",
    "text": "Install\nStable version:\npip install savvi\nDevelopment version:\npip install git+https://github.com/assuncaolfi/savvi\nFor development, use pdm."
  },
  {
    "objectID": "index.html#get-started",
    "href": "index.html#get-started",
    "title": "savvi",
    "section": "Get started",
    "text": "Get started\nSee the example gallery."
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Inhomogeneous Bernoulli Process\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInhomogeneous Poisson Process\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinear Regression\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultinomial\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "examples/LinearRegression.html",
    "href": "examples/LinearRegression.html",
    "title": "Linear Regression",
    "section": "",
    "text": "Application: testing of treatment effects while adjusting for pre-treatment covariables.\nConsider the arrival of a new experimental unit \\(n\\). This unit has a pre-treatment measurement \\(x_n \\in \\mathbb{R}\\) and is assigned a treatment \\(z_n \\in \\{0, 1\\}\\). After the treatment, the unit produces an outcome\n\\[\n\\begin{aligned}\ny_n = \\beta_0 + \\beta_1 x_n + \\beta_2 z_n + \\epsilon_n \\\\\n\\epsilon_n \\sim N(0, 1).\n\\end{aligned}\n\\]\n\nimport numpy as np\n\nsize = 5000\nnp.random.seed(1)\nx = np.random.normal(size=size)\nz = np.random.binomial(1, 1 / 2, size=size)\nepsilon = np.random.normal(size=size)\nbeta = np.array([1.00, 0.32, 0.16])\ny = beta[0] + beta[1] * x + beta[2] * z + epsilon\nyx = np.column_stack((y, np.ones(size), x, z))\n\nprint(yx)\n\n[[ 1.20608328  1.          1.62434536  1.        ]\n [ 0.61208307  1.         -0.61175641  0.        ]\n [ 1.7668771   1.         -0.52817175  0.        ]\n ...\n [ 2.33983342  1.         -0.77598779  0.        ]\n [-0.85242757  1.          1.08488869  0.        ]\n [ 3.49552322  1.          2.24198946  1.        ]]\n\n\nWe can test the hypothesis\n\\[\n\\begin{align}\nH_0: \\beta_2 = 0 \\\\\nH_1: \\beta_2 \\neq 0\n\\end{align}\n\\]\nand estimate \\((1 - \\alpha)\\) confidence sequences for \\(\\beta_2\\) using a LinearRegression model:\n\nfrom savvi.linear_regression import LinearRegression\n\nalpha = 0.05\np = beta.size\nlr = LinearRegression(alpha, p)\n\nFor each new unit sample \\(n\\), we run the test. If \\(p_n(\\beta_2) &lt; \\alpha\\), we have the option to stop running:\n\nsequence = lr.batch(yx)\noptional_stop = next(s for s in sequence if s.p_value[2] &lt;= alpha)\noptional_stop\n\n\n\n\nParameter\nEstimate\nCI Lower\nCI Upper\nP-value\n\n\n\n\n\\(\\beta_0\\)\n1.0056\n0.9187\n1.1539\n0.0\n\n\n\\(\\beta_1\\)\n0.3357\n0.2234\n0.3987\n0.0\n\n\n\\(\\beta_2\\)\n0.2128\n0.0027\n0.3701\n0.0432\n\n\n\nSample size: 949\n\n\n\n%config InlineBackend.figure_formats = [\"svg\"]\nfrom savvi.utils import plot\n\nfig, ax1, ax2 = plot(sequence, truth=beta, index=[2])\nax1.set_ylim(-0.25, 0.75)"
  },
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "Changelog",
    "section": "",
    "text": "All notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.\n\n\n\n\n\nP-values are compared using np.fmin instead of np.minimum, so NaNs are not propagated\n\n\n\n\n\n\n\n\nInference.__str__ and Inference._repr_markdown_ methods\n\n\n\n\n\nBumped numpy to 2.1.2, as well as other dependencies\nImproved documentation\n\n\n\n\n\n\n\n\nInference for linear regression coefficients\nExample notebook for LinearRegression model\nWebsite documentation using quartodoc\nInference.batch update method\nUtilities for plotting\nPublished to pypi\n\n\n\n\n\nSome refactoring in the base Inference object"
  },
  {
    "objectID": "CHANGELOG.html#section",
    "href": "CHANGELOG.html#section",
    "title": "Changelog",
    "section": "",
    "text": "P-values are compared using np.fmin instead of np.minimum, so NaNs are not propagated"
  },
  {
    "objectID": "CHANGELOG.html#section-1",
    "href": "CHANGELOG.html#section-1",
    "title": "Changelog",
    "section": "",
    "text": "Inference.__str__ and Inference._repr_markdown_ methods\n\n\n\n\n\nBumped numpy to 2.1.2, as well as other dependencies\nImproved documentation"
  },
  {
    "objectID": "CHANGELOG.html#section-2",
    "href": "CHANGELOG.html#section-2",
    "title": "Changelog",
    "section": "",
    "text": "Inference for linear regression coefficients\nExample notebook for LinearRegression model\nWebsite documentation using quartodoc\nInference.batch update method\nUtilities for plotting\nPublished to pypi\n\n\n\n\n\nSome refactoring in the base Inference object"
  },
  {
    "objectID": "examples/InhomogeneousPoissonProcess.html",
    "href": "examples/InhomogeneousPoissonProcess.html",
    "title": "Inhomogeneous Poisson Process",
    "section": "",
    "text": "Application: software canary testing when all processes share a common multiplicative time-varying effect.\nConsider points are observed from one of \\(i \\in \\{1, 2\\}\\) Poisson point processes with intensity functions \\(\\lambda_i(t) = \\rho_i \\exp(\\delta_i) \\lambda(t)\\), with \\(\\rho = [0.8, 0.2]\\) and \\(\\delta = [1.5, 2]\\). The probability that the next point comes from process \\(i\\) is\n\\[\n\\theta_i = \\frac{\\rho_i \\exp(\\delta_i)}{\\sum_{j=1}^d \\rho_j \\exp(\\delta_j)}.\n\\]\nTherefore, the next point comes from a random process, distributed as \\(\\mathrm{Multinomial}(1, \\mathbf{\\theta})\\), with \\(\\mathbf{\\theta} \\approx [0.7, 0.3]\\).\n\nimport numpy as np\n\nrho = np.array([0.8, 0.2])\ndelta = np.array([1.5, 2])\ntheta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))\nsize = 1000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n\n[[1 0]\n [0 1]\n [1 0]\n ...\n [1 0]\n [1 0]\n [0 1]]\n\n\nWe can test the hypothesis\n\\[\n\\begin{align}\nH_0: \\delta_1 - \\delta_0 = 0 \\quad (\\mathbf{\\theta} = \\mathbf{\\rho}) \\\\\nH_1: \\delta_1 - \\delta_0 \\neq 0  \\quad (\\mathbf{\\theta} \\neq \\mathbf{\\rho})\n\\end{align}\n\\]\nusing a Multinomial test with \\(\\mathbf{\\theta}_0 = \\mathbf{\\rho}\\). To estimate a \\((1 - \\alpha)\\) confidence sequence for \\(\\delta_1 - \\delta_0\\), we may set weights \\([-1, 1]\\):\n\nfrom savvi.multinomial import InhomogeneousPoissonProcess\n\nalpha = 0.05\nweights = np.array([[-1, 1]])\nipp = InhomogeneousPoissonProcess(alpha, rho, weights)\n\nAttributeError: _ARRAY_API not found\n\n\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver ECOS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver SCS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver ECOS_BB:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:34:42 PM: Encountered unexpected exception importing solver OSQP:\nImportError('numpy.core.multiarray failed to import')\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nFor each new unit sample \\(n\\), we run the test. If \\(p_n &lt; \\alpha\\), we have the option to stop running:\n\nsequence = ipp.batch(xs)\noptional_stop = next(s for s in sequence if s.p_value &lt;= alpha)\noptional_stop\n\n\n\n\nParameter\nEstimate\nCI Lower\nCI Upper\n\n\n\n\n\\(- \\delta_0 +  \\delta_1\\)\n0.5162\n0.0046\n0.7549\n\n\n\nSample size: 210, P-value: 0.0456\n\n\n\n%config InlineBackend.figure_formats = [\"svg\"]\n\nimport matplotlib.pyplot as plt\nfrom savvi.utils import plot\n\ncontrasts = ipp.weights @ delta\n_, ax1, _ = plot(sequence, contrasts)\nax1.set_ylim(-1, 2)\nplt.show()"
  },
  {
    "objectID": "examples/InhomogeneousBernoulliProcess.html",
    "href": "examples/InhomogeneousBernoulliProcess.html",
    "title": "Inhomogeneous Bernoulli Process",
    "section": "",
    "text": "Application: conversion rate optimization when all groups share a common multiplicative time-varying effect.\nSuppose a new experimental unit \\(n\\) is randomly assigned to one of \\(i \\in \\{1, 2, 3\\}\\) experiment treatment groups at time \\(t\\), with assignment probabilities \\(\\mathbf{\\rho} = [0.1, 0.3, 0.6]\\), and a Bernoulli outcome is observed with probability \\(p_i(t) = \\exp(\\mu(t) + \\delta_{i})\\), \\(\\mathbf{\\delta} = [\\log 0.2, \\log 0.3, \\log 0.4]\\). The conditional probability that the next Bernoulli success comes from group \\(i\\) is\n\\[\n\\theta_i = \\frac{\\rho_i \\exp(\\delta_i)}{\\sum_{j=1}^d \\rho_j \\exp(\\delta_j)}.\n\\]\nTherefore, the next Bernoulli success comes from a random group, \\(\\mathrm{Multinomial}(1, \\mathbf{\\theta})\\) distributed, with \\(\\mathbf{\\theta} \\approx [0.05, 0.25, 0.68]\\).\n\nimport numpy as np\n\nrho = np.array([0.1, 0.3, 0.6])\ndelta = np.log([0.2, 0.3, 0.4])\ntheta = rho * np.exp(delta) / np.sum(rho * np.exp(delta))\nsize = 4000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n\n[[0 0 1]\n [0 0 1]\n [0 0 1]\n ...\n [0 1 0]\n [0 1 0]\n [0 0 1]]\n\n\nWe can test the hypothesis\n\\[\n\\begin{align}\nH_0: \\delta_0 \\geq \\delta_1, \\delta_0 \\geq \\delta_2 \\\\\nH_1: \\delta_0 \\lt \\delta_1, \\delta_0 \\lt \\delta_2\n\\end{align}\n\\]\nusing a Multinomial test with \\(\\mathbf{\\theta}_0 = \\mathbf{\\rho}\\) and a list of inequalities for \\(\\mathbf{\\delta}\\). To estimate \\((1 - \\alpha)\\) confidence intervals for the contrasts, we may set a matrix of weights, with rows \\([-1, 0, 1]\\) for \\(\\delta_2 - \\delta_0\\) and \\([0, -1, 1]\\) for \\(\\delta_2 - \\delta_1\\):\n\nfrom savvi.multinomial import InhomogeneousBernoulliProcess\n\nalpha = 0.05\nhypothesis = lambda delta: [delta[0] &gt;= delta[1], delta[0] &gt;= delta[2]]\nweights = np.array([[-1, 0, 1], [0, -1, 1]])\nibp = InhomogeneousBernoulliProcess(alpha, rho, hypothesis, weights)\n\nAttributeError: _ARRAY_API not found\n\n\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver ECOS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver SCS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver ECOS_BB:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:37:32 PM: Encountered unexpected exception importing solver OSQP:\nImportError('numpy.core.multiarray failed to import')\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nFor each new unit sample \\(n\\), we run the test. If \\(p_n &lt; \\alpha\\), we have the option to stop running:\n\nsequence = ibp.batch(xs)\noptional_stop = next(s for s in sequence if s.p_value &lt;= alpha)\noptional_stop\n\n\n\n\nParameter\nEstimate\nCI Lower\nCI Upper\n\n\n\n\n\\(- \\delta_0 +  \\delta_2\\)\n0.8232\n0.0009\n1.7716\n\n\n\\(- \\delta_1 +  \\delta_2\\)\n0.2231\n-0.1577\n0.6472\n\n\n\nSample size: 302, P-value: 0.0492\n\n\n\n%config InlineBackend.figure_formats = [\"svg\"]\nimport matplotlib.pyplot as plt\nfrom savvi.utils import plot\n\ncontrasts = ibp.weights @ delta\n_, ax1, _ = plot(sequence, contrasts)\nax1.set_ylim(-1, 2)\nplt.show()"
  },
  {
    "objectID": "examples/Multinomial.html",
    "href": "examples/Multinomial.html",
    "title": "Multinomial",
    "section": "",
    "text": "Application: sample ratio mismatch.\nConsider a new experimental unit \\(n\\) is assigned to one of \\(i \\in \\{1, 2, 3\\}\\) groups with probabilities \\(\\mathbf{\\theta} = [0.1, 0.3, 0.6]\\). Therefore, groups are \\(\\mathrm{Multinomial}(1, \\mathbf{\\theta})\\) distributed.\n\nimport numpy as np\n\ntheta = np.array([0.1, 0.3, 0.6])\nsize = 1000\nnp.random.seed(1)\nxs = np.random.multinomial(1, theta, size=size)\nprint(xs)\n\n[[0 1 0]\n [0 0 1]\n [0 0 1]\n ...\n [0 1 0]\n [1 0 0]\n [0 0 1]]\n\n\nWe can test the hypothesis\n\\[\n\\begin{align}\nH_0: \\mathbf{\\theta} = \\mathbf{\\theta_0} \\\\\nH_1: \\mathbf{\\theta} \\neq \\mathbf{\\theta_0}\n\\end{align}\n\\]\nwith \\(\\mathbf{\\theta_0} = [0.1, 0.4, 0.5]\\) and estimate \\((1 - \\alpha)\\) confidence sequences for \\(\\mathbf{\\theta}\\) using the Multinomial test:\n\nfrom savvi.multinomial import Multinomial\nalpha = 0.05\ntheta_0 = np.array([0.1, 0.4, 0.5])\nmultinomial = Multinomial(alpha, theta_0)\n\nAttributeError: _ARRAY_API not found\n\n\n(CVXPY) Oct 24 05:36:17 PM: Encountered unexpected exception importing solver ECOS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:36:17 PM: Encountered unexpected exception importing solver SCS:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:36:17 PM: Encountered unexpected exception importing solver ECOS_BB:\nImportError('numpy.core.multiarray failed to import')\n(CVXPY) Oct 24 05:36:17 PM: Encountered unexpected exception importing solver OSQP:\nImportError('numpy.core.multiarray failed to import')\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nAttributeError: _ARRAY_API not found\n\n\nFor each new unit sample \\(n\\), we run the test. If \\(p_n &lt; \\alpha\\), we have the option to stop running:\n\nsequence = multinomial.batch(xs)\noptional_stop = next(s for s in sequence if s.p_value &lt;= alpha)\noptional_stop\n\n\n\n\nParameter\nEstimate\nCI Lower\nCI Upper\n\n\n\n\n\\(\\theta_0\\)\n0.0995\n0.0567\n0.1494\n\n\n\\(\\theta_1\\)\n0.3209\n0.2609\n0.4028\n\n\n\\(\\theta_2\\)\n0.5796\n0.4971\n0.6518\n\n\n\nSample size: 402, P-value: 0.0485\n\n\n\n\nCode\n%config InlineBackend.figure_formats = [\"svg\"]\nfrom savvi.utils import plot\n\nplot(sequence, theta);"
  },
  {
    "objectID": "reference/InhomogeneousPoissonProcess.html",
    "href": "reference/InhomogeneousPoissonProcess.html",
    "title": "InhomogeneousPoissonProcess",
    "section": "",
    "text": "multinomial.InhomogeneousPoissonProcess(self, alpha, rho, weights, k=100)\nCanary software release test from Lindon and Malek (2022).\n\nParent class: InhomogeneousBernoulliProcess\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\nrho\nnp.ndarray\nAssignment probabilities \\(\\mathbf{\\rho}\\).\nrequired\n\n\nweights\nnp.ndarray\nContrast weights \\(W\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\rho}\\).\n100",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "InhomogeneousPoissonProcess"
    ]
  },
  {
    "objectID": "reference/InhomogeneousPoissonProcess.html#parameters",
    "href": "reference/InhomogeneousPoissonProcess.html#parameters",
    "title": "InhomogeneousPoissonProcess",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\nrho\nnp.ndarray\nAssignment probabilities \\(\\mathbf{\\rho}\\).\nrequired\n\n\nweights\nnp.ndarray\nContrast weights \\(W\\).\nrequired\n\n\nk\nfloat\nConcentration for Dirichlet prior parameters \\(\\mathbf{\\alpha}_0 = k \\mathbf{\\rho}\\).\n100",
    "crumbs": [
      "Reference",
      "savvi",
      "multinomial",
      "InhomogeneousPoissonProcess"
    ]
  },
  {
    "objectID": "reference/LinearRegression.html",
    "href": "reference/LinearRegression.html",
    "title": "LinearRegression",
    "section": "",
    "text": "linear_regression.LinearRegression(self, alpha, p, phi=1)\nCoefficient t-test for treatment effects from Lindon et al. (2024).\nCoefficients and covariance matrix are calculated using the Recursive Least Squares algorithm.\n\nParent class: Inference\nExample\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\np\nint\nNumber of covariates \\(p\\).\nrequired\n\n\nphi\nfloat\nPrior scale \\(\\phi\\).\n1\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nXty\nSum of products of covariates and response \\(X^T y\\).\n\n\nbeta\nEstimate of regression coefficients \\(\\hat{\\beta}\\).\n\n\ncovariance\nEstimate of covariance matrix \\(\\hat{\\Sigma}\\).\n\n\nphi\nPrior scale \\(\\phi\\).\n\n\nyty\nSum of squared response values \\(y^T y\\).\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nnu\nDegrees of freedom.\n\n\npredict\nPredict values for given covariates.\n\n\nsigma\nEstimate the standard deviation of the error term.\n\n\nsse\nCompute the Sum of Squared Errors (SSE).\n\n\nstandard_errors\nEstimate the standard errors of the coefficients.\n\n\nt_stats\nCalculate the t statistics of the coefficients.\n\n\nupdate\nUpdate the model with new data.\n\n\nz2\nCalculate the squared z-scores.\n\n\n\n\n\nlinear_regression.LinearRegression.nu()\nDegrees of freedom.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.predict(X)\nPredict values for given covariates.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nX\nnp.ndarray\nMatrix of covariates.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.sigma()\nEstimate the standard deviation of the error term.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.sse()\nCompute the Sum of Squared Errors (SSE).\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.standard_errors()\nEstimate the standard errors of the coefficients.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.t_stats()\nCalculate the t statistics of the coefficients.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.update(yx)\nUpdate the model with new data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nyx\nnp.ndarray\nArray of response and covariate values \\([y, x_1, \\dots, x_p]\\).\nrequired\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.z2()\nCalculate the squared z-scores.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray",
    "crumbs": [
      "Reference",
      "savvi",
      "linear_regression",
      "LinearRegression"
    ]
  },
  {
    "objectID": "reference/LinearRegression.html#parameters",
    "href": "reference/LinearRegression.html#parameters",
    "title": "LinearRegression",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nProbability of Type I error \\(\\alpha\\).\nrequired\n\n\np\nint\nNumber of covariates \\(p\\).\nrequired\n\n\nphi\nfloat\nPrior scale \\(\\phi\\).\n1",
    "crumbs": [
      "Reference",
      "savvi",
      "linear_regression",
      "LinearRegression"
    ]
  },
  {
    "objectID": "reference/LinearRegression.html#attributes",
    "href": "reference/LinearRegression.html#attributes",
    "title": "LinearRegression",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nXty\nSum of products of covariates and response \\(X^T y\\).\n\n\nbeta\nEstimate of regression coefficients \\(\\hat{\\beta}\\).\n\n\ncovariance\nEstimate of covariance matrix \\(\\hat{\\Sigma}\\).\n\n\nphi\nPrior scale \\(\\phi\\).\n\n\nyty\nSum of squared response values \\(y^T y\\).",
    "crumbs": [
      "Reference",
      "savvi",
      "linear_regression",
      "LinearRegression"
    ]
  },
  {
    "objectID": "reference/LinearRegression.html#methods",
    "href": "reference/LinearRegression.html#methods",
    "title": "LinearRegression",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nnu\nDegrees of freedom.\n\n\npredict\nPredict values for given covariates.\n\n\nsigma\nEstimate the standard deviation of the error term.\n\n\nsse\nCompute the Sum of Squared Errors (SSE).\n\n\nstandard_errors\nEstimate the standard errors of the coefficients.\n\n\nt_stats\nCalculate the t statistics of the coefficients.\n\n\nupdate\nUpdate the model with new data.\n\n\nz2\nCalculate the squared z-scores.\n\n\n\n\n\nlinear_regression.LinearRegression.nu()\nDegrees of freedom.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nint\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.predict(X)\nPredict values for given covariates.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nX\nnp.ndarray\nMatrix of covariates.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.sigma()\nEstimate the standard deviation of the error term.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.sse()\nCompute the Sum of Squared Errors (SSE).\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nfloat\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.standard_errors()\nEstimate the standard errors of the coefficients.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.t_stats()\nCalculate the t statistics of the coefficients.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray\n\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.update(yx)\nUpdate the model with new data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nyx\nnp.ndarray\nArray of response and covariate values \\([y, x_1, \\dots, x_p]\\).\nrequired\n\n\n\n\n\n\n\nlinear_regression.LinearRegression.z2()\nCalculate the squared z-scores.\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nnp.ndarray",
    "crumbs": [
      "Reference",
      "savvi",
      "linear_regression",
      "LinearRegression"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "Inference\nBase class for inference.\n\n\n\n\n\n\n\n\nLinearRegression\nCoefficient t-test for treatment effects from Lindon et al. (2024).\n\n\n\n\n\n\n\n\n\nMultinomial\nSample ratio mismatch test from Lindon and Malek (2022).\n\n\nInhomogeneousBernoulliProcess\nConversion rate optimization test from Lindon and Malek (2022).\n\n\nInhomogeneousPoissonProcess\nCanary software release test from Lindon and Malek (2022).",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "reference/index.html#savvi",
    "href": "reference/index.html#savvi",
    "title": "Reference",
    "section": "",
    "text": "Inference\nBase class for inference.\n\n\n\n\n\n\n\n\nLinearRegression\nCoefficient t-test for treatment effects from Lindon et al. (2024).\n\n\n\n\n\n\n\n\n\nMultinomial\nSample ratio mismatch test from Lindon and Malek (2022).\n\n\nInhomogeneousBernoulliProcess\nConversion rate optimization test from Lindon and Malek (2022).\n\n\nInhomogeneousPoissonProcess\nCanary software release test from Lindon and Malek (2022).",
    "crumbs": [
      "Reference"
    ]
  }
]